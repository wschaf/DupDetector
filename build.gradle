plugins {
   id 'java'
   id "org.xbib.gradle.plugin.jflex" version "1.5.0"    // Jflex plugin
   id "org.xbib.gradle.plugin.git" version "2.0.0"
   id "jacoco"                                          // provides code coverage metrics
}

java {
    sourceCompatibility = JavaVersion.toVersion(11)     //  Level of Java compatability is at least 11.
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    mavenCentral()                                      //  Use the updated maven central repository to pull dependency packages.
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

sourceSets {
  main {
     jflex {
       srcDir "src/main/jflex"
     }
     java {
       srcDir "$buildDir/generatedSources/jflex"        // directory for generated sources in the build folder
     }
  }
}

jar {
    manifest {
        attributes 'Main-Class': 'edu.odu.cs.cs350.DupDetector'     // to execute .jar files
    }
}

test {
    ignoreFailures = true                                   //  Continue to build even after failing a unit test
    useJUnitPlatform()                                  //  Use JUnit for the Unit Test Framework
    testLogging {
        showStandardStreams = true                      //  Make sure output from standard out or error is shown in Gradle output.
    }
    reports {
        html.enabled = true
    }
}

javadoc {
    failOnError false
}

jacocoTestReport {                                      // Implements standard gradle type reporting
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled true
    }
}

jacoco {
    toolVersion = "0.8.7"
}


task copyDocs (type: Copy) {                            // task to copy javadocs to "docs" directory
    from 'build/docs'
    into "docs/"
    dependsOn 'javadoc'
}

task copyTest (type: Copy) {                            // task to copy test reports to "test" directory
    from 'build/reports'
    into "reports/"
    dependsOn 'test'
}

task deleteExtraBuildFiles(type: Delete) {
    delete  'build/classes',
            'build/generated',
            'build/generatedSources',
            'build/libs',
            'build/resources',
            'build/test-results',
            'build/tmp'
}

task report (dependsOn: ['javadoc', 'test', 'copyDocs', 'copyTest', 'deleteExtraBuildFiles']) {      // execute task commands
    description  'Generate Reports'
}

task deployReports (type: Copy, dependsOn: ['report', 'check']) {
    doLast {
        def thisRepo = rootProject.projectDir.toString()
        
        def grgit = git.clone {
            uri = 'file:' + thisRepo
            bare = false
            refToCheckout = 'gh-pages'
        }
        grgit.checkout {
            branch = 'gh-pages'
        }
        grgit.add (update: false, patterns: ['reports/'])
        grgit.add (update: true, patterns: ['reports/'])
        grgit.add (update: false, patterns: ['docs/'])
        grgit.add (update: true, patterns: ['docs/'])
        grgit.commit {
            message = "Updating web pages"
        }
        grgit.push {}
        grgit.checkout {
        	branch = 'main'
        }
    }

}

plugins {
   id "java"
   id "org.xbib.gradle.plugin.jflex" version "1.5.0"    // Jflex plugin
   id "org.xbib.gradle.plugin.git" version "2.0.0"
   id "jacoco"                                          // Provides code coverage metrics
   id "pmd"                                             // Static code analysis
   id "com.github.spotbugs" version "5.0.0-beta.8"      // Static code analysis
   id "checkstyle"                                      // Static code analysis
   id 'edu.odu.cs.report_accumulator' version '1.4' 

}

java {
    sourceCompatibility = JavaVersion.toVersion(11)     //  Level of Java compatability is at least 11.
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    mavenCentral()                                      //  Use the updated maven central repository to pull dependency packages.
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

sourceSets {
  main {
     jflex {
       srcDir "src/main/jflex"
     }
     java {
       srcDir "$buildDir/generatedSources/jflex"        // Directory for generated sources in the build folder
     }
  }
}

jar {
    manifest {
        attributes 'Main-Class': 'edu.odu.cs.cs350.DupDetector'     // To execute .jar files
    }
}

test {
    finalizedBy jacocoTestReport
    ignoreFailures = true                                   //  Continue to build even after failing a unit test
    useJUnitPlatform()                                  //  Use JUnit for the Unit Test Framework
    testLogging {
        showStandardStreams = true                      //  Make sure output from standard out or error is shown in Gradle output.
    }
    reports {
        html.enabled = true
    }
}

javadoc {
    failOnError false
}

jacocoTestReport {                                      // Implements standard gradle type reporting
    dependsOn test
    reports {
        html.enabled true
    }
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = file("$buildDir/jacoco")
}

checkstyle {
    toolVersion "9.1"
    ignoreFailures = true
    showViolations = false
}

tasks.withType(Checkstyle) {
    reports {
        html.destination project.file("build/reports/checkstyle/main.html")
    }
}

pmd {
    ignoreFailures = true
    consoleOutput = false
}

spotbugsMain {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    reports {
       xml.enabled = false
       html.enabled = true
    }
}

checkstyleTest.enabled = false                          // Suppresses running checkstyle on code in src/test/java
pmdTest.enabled = false                                 // Suppresses running PMD on code in src/test/java
spotbugsTest.enabled = false                            // Suppresses running spotbugs on code in src/test/java

task copyDocs (type: Copy) {                            // Task to copy javadocs to "docs" directory
    from 'build/docs'
    into "docs/"
    dependsOn 'javadoc'
}

task copyTest (type: Copy) {                            // Task to copy test reports to "test" directory
    from 'build/reports'
    into "reports/"
    dependsOn 'test'
}

task renamePMDMain (type:Copy) {                        // Rename main to index in order for gh-pages to detect html
    from 'build/reports/pmd/'
    into 'build/reports/pmd/'
    rename('main.html', 'index.html')
}

task renameSpotBugsMain (type:Copy) {
    from 'build/reports/spotbugs/'
    into 'build/reports/spotbugs/'
    rename('main.html', 'index.html')
}

task renameCheckStyleMain (type: Copy) {
    from 'build/reports/checkstyle/'
    into 'build/reports/checkstyle/'
    rename('main.html', 'index.html')
}

task deleteExtraBuildFiles(type: Delete) {
    delete  'build/classes',
            'build/generated',
            'build/generatedSources',
            'build/libs',
            'build/resources',
            'build/test-results',
            'build/tmp',
            'build/reports/pmd/main.html',
            'build/reports/spotbugs/main.html',
            'build/reports/checkstyle/main.html'
}

task reports (dependsOn: ['javadoc', 'test', 'copyDocs', 'copyTest',
                          'deleteExtraBuildFiles', 'renamePMDMain',
                           'renameSpotBugsMain', 'renameCheckStyleMain']) {      // execute task commands
    description  'Generate Reports'
}

// task deployReports (type: Copy, dependsOn: ['reports', 'check']) {
//     doLast {
//         def thisRepo = rootProject.projectDir.toString()
        
//         def grgit = git.clone {
//             uri = 'file:' + thisRepo
//             bare = false
//             refToCheckout = 'gh-pages'
//         }
//         grgit.checkout {
//             branch = 'gh-pages'
//         }
//         grgit.add (update: false, patterns: ['reports/'])
//         grgit.add (update: true, patterns: ['reports/'])
//         grgit.add (update: false, patterns: ['docs/'])
//         grgit.add (update: true, patterns: ['docs/'])
//         grgit.commit {
//             message = "Updating web pages"
//         }
//         grgit.push {}
//         grgit.checkout {
//         	branch = 'main'
//         }
//     }

// }
reportStats {
    reportsURL = 'https://wschaf.github.io/DupDetector/'
    htmlSourceDir = file('src/main/html')  // default value
    reportsDir = file('build/reports') // default value
    buildID = "12345"                  // defaults to current date, but can be any run identifier
}